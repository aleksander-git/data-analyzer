// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: datasets.sql

package datasets

import (
	"context"
	"database/sql"
)

const createDataset = `-- name: CreateDataset :one
INSERT INTO datasets (user_id, dataset_status_id, database_id, table_name)
VALUES ($1, $2, $3, $4) RETURNING dataset_id, user_id, dataset_status_id, database_id, table_name, is_archieved, archieved_at, created_at
`

type CreateDatasetParams struct {
	UserID          int64
	DatasetStatusID int32
	DatabaseID      int64
	TableName       sql.NullString
}

func (q *Queries) CreateDataset(ctx context.Context, arg CreateDatasetParams) (Dataset, error) {
	row := q.db.QueryRowContext(ctx, createDataset,
		arg.UserID,
		arg.DatasetStatusID,
		arg.DatabaseID,
		arg.TableName,
	)
	var i Dataset
	err := row.Scan(
		&i.DatasetID,
		&i.UserID,
		&i.DatasetStatusID,
		&i.DatabaseID,
		&i.TableName,
		&i.IsArchieved,
		&i.ArchievedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getDatasetByID = `-- name: GetDatasetByID :one
SELECT dataset_id, user_id, dataset_status_id, database_id, table_name, is_archieved, archieved_at, created_at FROM datasets
WHERE dataset_id = $1 LIMIT 1
`

func (q *Queries) GetDatasetByID(ctx context.Context, datasetID int64) (Dataset, error) {
	row := q.db.QueryRowContext(ctx, getDatasetByID, datasetID)
	var i Dataset
	err := row.Scan(
		&i.DatasetID,
		&i.UserID,
		&i.DatasetStatusID,
		&i.DatabaseID,
		&i.TableName,
		&i.IsArchieved,
		&i.ArchievedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateDataset = `-- name: UpdateDataset :one
UPDATE datasets
SET 
  table_name = $2,
  is_archieved = $3,
  archieved_at = $4,
  dataset_status_id = $5,
  database_id = $6
WHERE dataset_id = $1 RETURNING dataset_id, user_id, dataset_status_id, database_id, table_name, is_archieved, archieved_at, created_at
`

type UpdateDatasetParams struct {
	DatasetID       int64
	TableName       sql.NullString
	IsArchieved     bool
	ArchievedAt     sql.NullTime
	DatasetStatusID int32
	DatabaseID      int64
}

func (q *Queries) UpdateDataset(ctx context.Context, arg UpdateDatasetParams) (Dataset, error) {
	row := q.db.QueryRowContext(ctx, updateDataset,
		arg.DatasetID,
		arg.TableName,
		arg.IsArchieved,
		arg.ArchievedAt,
		arg.DatasetStatusID,
		arg.DatabaseID,
	)
	var i Dataset
	err := row.Scan(
		&i.DatasetID,
		&i.UserID,
		&i.DatasetStatusID,
		&i.DatabaseID,
		&i.TableName,
		&i.IsArchieved,
		&i.ArchievedAt,
		&i.CreatedAt,
	)
	return i, err
}
